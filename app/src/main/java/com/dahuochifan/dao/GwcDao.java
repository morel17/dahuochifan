package com.dahuochifan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.s
/** 
 * DAO for table Gwc.
*/
public class GwcDao extends AbstractDao<Gwc, Long> {

    public static final String TABLENAME = "GWC";

    /**
     * Properties of entity Gwc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cbids = new Property(1, String.class, "cbids", false, "CBIDS");
        public final static Property Mid = new Property(2, String.class, "mid", false, "MID");
        public final static Property Date = new Property(3, String.class, "mydate", false, "MYDATE");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
		public final static Property Distance = new Property(6, String.class, "distance", false, "DISTANCE");
		public final static Property Nickname = new Property(7, String.class, "nickname", false, "NICKNAME");
		public final static Property Name = new Property(8, String.class, "name", false, "NAME");
		public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
		public final static Property Price = new Property(10, Double.class, "price", false, "PRICE");
		public final static Property Totalsource = new Property(11, Integer.class, "totalsource", false, "TOTALSOURCE");
		public final static Property Number = new Property(12, Integer.class, "number", false, "NUMBER");
		public final static Property Chefid = new Property(13, String.class, "chefid", false, "CHEFID");
    };


    public GwcDao(DaoConfig config) {
        super(config);
    }
    
    public GwcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "'GWC' (" + //
//                "'_id' INTEGER PRIMARY KEY ," + // 0: id
//                "'CBIDS' TEXT NOT NULL ," 
//                + // 1: text
//                "'MID' TEXT," 
//                + // 1: text
//                "'MYDATE' TEXT);"
//        		); // 3: date
        db.execSQL("CREATE TABLE " + constraint + "'GWC' ("
				+ //
				"'_id' INTEGER PRIMARY KEY ,"
				+ // 0: id
				"'CBIDS' TEXT ," + "'MID' TEXT ,"
				+ // 1: text
				"'MYDATE' TEXT ," + "'STATUS' TEXT,"
				+ // 2: comment
				"'ADDRESS' TEXT," + "'DISTANCE' TEXT," + "'NICKNAME' TEXT," + "'NAME' TEXT," + "'AVATAR' TEXT," + "'PRICE' DOUBLE," + "'TOTALSOURCE' INTEGER,"
				+ "'NUMBER' INTEGER,"
				+ "'CHEFID' TEXT);"
        		); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GWC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gwc entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCbids());
 
        String comment = entity.getMid();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
        
        String mydate=entity.getDate();
        if(mydate!=null){
        	stmt.bindString(4, mydate);
        }
        String status = entity.getStatus();
		if (status != null) {
			stmt.bindString(5, status);
		}
		String address = entity.getAddress();
		if (address != null) {
			stmt.bindString(6, address);
		}
		String distance = entity.getDistance();
		if (distance != null) {
			stmt.bindString(7, distance);
		}
		String nickname = entity.getNickname();
		if (nickname != null) {
			stmt.bindString(8, nickname);
		}
		String name = entity.getName();
		if (name != null) {
			stmt.bindString(9, name);
		}
		String avatar = entity.getAvatar();
		if (avatar != null) {
			stmt.bindString(10, avatar);
		}
		Double price = entity.getPrice();
		if (price != null) {
			stmt.bindDouble(11, price);
		}
		Integer totalsource = entity.getTotalsource();
		if (totalsource != null) {
			stmt.bindLong(12, totalsource);
		}
		Integer number = entity.getNumber();
		if (number != null) {
			stmt.bindLong(13, number);
		}
		
		String chefid=entity.getChefid();
		if(chefid!=null){
			stmt.bindString(14, chefid);
		}
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gwc readEntity(Cursor cursor, int offset) {
        Gwc entity = new Gwc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // date
					, cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3),
			cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5),
			cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7),
			cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9),
			cursor.isNull(offset + 10) ? 0.0 : cursor.getDouble(offset + 10), cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11),
			cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12),
			cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gwc entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCbids(cursor.getString(offset + 1));
        entity.setMid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        //entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
		entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
		entity.setDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
		entity.setNickname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
		entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
		entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
		entity.setPrice(cursor.isNull(offset + 10) ? 0.0 : cursor.getDouble(offset + 10));
		entity.setTotalsource(cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11));
		entity.setNumber(cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12));
		entity.setChefid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gwc entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gwc entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
